name: Run Tests

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      # 테스트용 MySQL 서비스 컨테이너
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3

    # JDK 설정
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # Gradle 캐시
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: ${{ runner.os }}-gradle-

    # Backend 테스트
    - name: Backend Tests
      working-directory: ./backend
      run: |
        chmod +x ./gradlew
        ./gradlew test

    # 테스트 결과 저장
    - name: Publish Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          **/build/reports/tests/test/
          **/build/test-results/test/

    # Node.js 설정
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    # Frontend 테스트
    - name: Frontend Tests
      working-directory: ./frontend
      run: |
        npm ci
        npm test -- --coverage

    # Frontend 테스트 커버리지 저장
    - name: Save Frontend Coverage
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-coverage
        path: frontend/coverage

    # 테스트 실패 시 코멘트 달기
    - name: Comment PR on Failure
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '❌ Tests failed. Please check the test results artifacts for more details.'
          })

    # 테스트 성공 시 코멘트 달기
    - name: Comment PR on Success
      if: success() && github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '✅ All tests passed successfully!'
          })
