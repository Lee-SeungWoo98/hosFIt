name: CI Test

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './front/package-lock.json'
    
    - name: Install Dependencies
      run: |
        rm -f package-lock.json
        npm install
        npm install -D @babel/preset-env @babel/preset-react babel-jest identity-obj-proxy jest @babel/plugin-transform-modules-commonjs @testing-library/jest-dom @testing-library/react @testing-library/user-event
      working-directory: ./front
    
    - name: Run Frontend Tests
      id: test
      run: |
        # 테스트 실행 및 결과 저장
        npm run test:ci
        
        # 결과 파일 위치 확인
        echo "현재 디렉토리 내용:"
        ls -la
        
        # 테스트 결과 파일 내용 출력
        if [ -f "test-results.json" ]; then
          echo "=== Test Results File Contents ==="
          cat test-results.json
          echo "================================="
        else
          echo "test-results.json not found in current directory"
          echo "Checking for test results in other locations..."
          find . -name "test-results.json"
        fi
      working-directory: ./front
      env:
        CI: true
        NODE_ENV: test
      continue-on-error: true

    - name: Add Test Results Comment
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            // 테스트 결과 파일 읽기 시도
            let testResults;
            const possiblePaths = [
              './front/test-results.json',
              './front/coverage/test-results.json',
              './front/jest_output/test-results.json'
            ];
            
            for (const path of possiblePaths) {
              try {
                console.log(`Trying to read from ${path}...`);
                const resultContent = fs.readFileSync(path, 'utf8');
                testResults = JSON.parse(resultContent);
                console.log(`Successfully read test results from ${path}`);
                break;
              } catch (e) {
                console.log(`Could not read from ${path}: ${e.message}`);
              }
            }
            
            if (!testResults) {
              throw new Error('Could not find test results file in any expected location');
            }
            
            // 테스트 결과 요약 생성
            const testSummary = `**전체 상태:** ${testResults.numFailedTests > 0 ? '❌ 일부 테스트 실패' : '✅ 모든 테스트 통과'}
            - 총 테스트 수: ${testResults.numTotalTests}
            - 통과: ${testResults.numPassedTests}
            - 실패: ${testResults.numFailedTests}`;
            
            // 상세 테스트 결과 생성
            const detailedResults = testResults.testResults
              .map(suite => {
                const fileName = suite.name.split('/').pop().replace('.test.js', '');
                return `#### ${fileName}
                ${suite.testResults.map(test => {
                  const status = test.status === 'passed' ? '✅' : '❌';
                  const title = test.title.split(' › ').pop(); // 마지막 부분만 사용
                  return `- ${status} ${title}`;
                }).join('\n')}`;
              })
              .join('\n\n');
            
            // 최종 메시지 구성
            const message = `## 테스트 결과 요약
            ${testSummary}
            
            ### 상세 테스트 결과
            ${detailedResults || '상세 테스트 결과가 없습니다.'}
            
            🕒 테스트 실행 시간: ${new Date().toLocaleString()}`;
            
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: message
              });
            }
          } catch (error) {
            console.error('Error in test result processing:', error);
            core.setFailed(`Action failed with error: ${error.message}`);
          }