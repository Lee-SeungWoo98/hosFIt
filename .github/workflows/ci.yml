name: CI Test

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './front/package-lock.json'
    
    - name: Install Dependencies
      run: npm ci
      working-directory: ./front
      
    - name: Run Frontend Tests
      id: test
      run: |
        npm run test:ci
        echo "TEST_FAILED=${{ job.status != 'success' }}" >> $GITHUB_ENV
      working-directory: ./front
      env:
        CI: true
      continue-on-error: true

    - name: Process Test Results
      if: always()
      run: |
        # Jest의 coverage 결과를 환경 변수로 저장
        COVERAGE_SUMMARY=$(cat ./front/coverage/coverage-summary.json)
        echo "COVERAGE_DATA=${COVERAGE_SUMMARY}" >> $GITHUB_ENV

    - name: Add Test Results Comment
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const coverageData = JSON.parse(process.env.COVERAGE_DATA || '{}');
          const summary = coverageData.total || {};
          
          const getStatusEmoji = (status) => status ? '✅' : '❌';
          const formatCoverage = (value) => value ? `${value.pct.toFixed(2)}% (${value.covered}/${value.total})` : 'N/A';
          
          const message = `## 테스트 결과 요약

          ### Frontend Tests 🌐
          **전체 상태:** ${getStatusEmoji(!process.env.TEST_FAILED)} ${process.env.TEST_FAILED === 'true' ? '일부 테스트 실패' : '모든 테스트 통과'}

          ### Coverage Report 📊
          - Statements : ${formatCoverage(summary.statements)}
          - Branches   : ${formatCoverage(summary.branches)}
          - Functions  : ${formatCoverage(summary.functions)}
          - Lines     : ${formatCoverage(summary.lines)}

          ---
          🕒 테스트 실행 시간: ${new Date().toISOString()}`;

          if (context.payload.pull_request) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: message
            });
          }