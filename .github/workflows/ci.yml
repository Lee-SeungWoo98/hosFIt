name: CI Test

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    # 코드 체크아웃
    - uses: actions/checkout@v3
    
    # Node.js 설정
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './front/package-lock.json'
    
    # Frontend 테스트
    - name: Install Dependencies
      run: npm ci
      working-directory: ./front
      
    - name: Run Frontend Tests
      id: test
      run: |
        npm run test:ci
        echo "::set-output name=summary::$(npm test -- --json | jq -r '.testResults[0].message')"
      working-directory: ./front
      env:
        CI: true
      continue-on-error: true

    # 테스트 상태 설정
    - name: Set Test Status
      run: |
        echo "TEST_FAILED=${{ steps.test.outcome == 'failure' }}" >> $GITHUB_ENV
        echo "TEST_SUMMARY<<EOF" >> $GITHUB_ENV
        echo "${{ steps.test.outputs.summary }}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # 커버리지 리포트 생성
    - name: Generate Coverage Report
      if: always()
      run: |
        COVERAGE=$(npm test -- --coverage --coverageReporters="text-summary" | tail -n 4)
        echo "COVERAGE_SUMMARY<<EOF" >> $GITHUB_ENV
        echo "$(echo "$COVERAGE" | sed 's/^/- /')" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
      working-directory: ./front

    # 테스트 결과를 PR에 코멘트로 달기
    - name: Add Test Results Comment
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const script = require('./.github/workflows/scripts/test-results.js')
          await script({github, context, core})