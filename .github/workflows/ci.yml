name: CI Test

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './front/package-lock.json'
    
    - name: Install Dependencies
      run: |
        rm -f package-lock.json
        npm install
        npm install -D @babel/preset-env @babel/preset-react babel-jest identity-obj-proxy jest @babel/plugin-transform-modules-commonjs @testing-library/jest-dom @testing-library/react @testing-library/user-event
      working-directory: ./front
    
    - name: Run Frontend Tests
      id: test
      run: |
        # 테스트 실행 및 결과 저장
        npm run test:ci
        
        # 테스트 결과 파일 내용 확인
        if [ -f "test-results.json" ]; then
          echo "=== Test Results File Contents ==="
          cat test-results.json
          echo "================================="
        fi
      working-directory: ./front
      env:
        CI: true
        NODE_ENV: test
      continue-on-error: true

    - name: Add Test Results Comment
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            // 테스트 결과 파일 읽기
            const resultContent = fs.readFileSync('./front/test-results.json', 'utf8');
            console.log('Raw test results:', resultContent);
            const testResults = JSON.parse(resultContent);
            
            // 테스트 결과 구조 확인
            console.log('Test results structure:', JSON.stringify(testResults, null, 2));
            
            // 테스트 결과 요약 생성
            const testSummary = `**전체 상태:** ${testResults.numFailedTests > 0 ? '❌ 일부 테스트 실패' : '✅ 모든 테스트 통과'}
            - 총 테스트 수: ${testResults.numTotalTests}
            - 통과: ${testResults.numPassedTests}
            - 실패: ${testResults.numFailedTests}`;
            
            // 상세 테스트 결과 생성
            let detailedResults = '';
            
            if (testResults.testResults && Array.isArray(testResults.testResults)) {
              detailedResults = testResults.testResults
                .filter(suite => suite && suite.testResults)
                .map(suite => {
                  const fileName = suite.name.split('/').pop().replace('.test.js', '');
                  const testDetails = suite.testResults
                    .map(test => {
                      const status = test.status === 'passed' ? '✅' : '❌';
                      const testName = test.title.includes(' › ') 
                        ? test.title.split(' › ').pop() 
                        : test.title;
                      return `- ${status} ${testName}`;
                    })
                    .join('\n');
                  
                  return `#### ${fileName}\n${testDetails}`;
                })
                .join('\n\n');
            } else {
              console.log('TestResults structure is not as expected:', testResults);
              
              // Jest의 다른 가능한 결과 형식 처리
              if (testResults.results && testResults.results.testResults) {
                detailedResults = testResults.results.testResults
                  .map(suite => {
                    const fileName = suite.name.split('/').pop().replace('.test.js', '');
                    const testDetails = suite.assertionResults
                      .map(test => {
                        const status = test.status === 'passed' ? '✅' : '❌';
                        const testName = test.title;
                        return `- ${status} ${testName}`;
                      })
                      .join('\n');
                    
                    return `#### ${fileName}\n${testDetails}`;
                  })
                  .join('\n\n');
              }
            }
            
            // 최종 메시지 구성
            const message = `## 테스트 결과 요약
            ${testSummary}
            
            ### 상세 테스트 결과
            ${detailedResults || '상세 테스트 결과가 없습니다.'}
            
            🕒 테스트 실행 시간: ${new Date().toLocaleString()}`;
            
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: message
              });
            }
          } catch (error) {
            console.error('Error in test result processing:', error);
            // 에러 발생 시 테스트 결과 구조 출력
            try {
              const resultContent = fs.readFileSync('./front/test-results.json', 'utf8');
              console.error('Test results file content:', resultContent);
            } catch (e) {
              console.error('Could not read test results file:', e);
            }
            core.setFailed(`Action failed with error: ${error.message}`);
          }