name: CI Test

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './front/package-lock.json'
    
    - name: Install Dependencies
      run: |
        rm -f package-lock.json
        npm install
        npm install -D @babel/preset-env @babel/preset-react babel-jest identity-obj-proxy jest @babel/plugin-transform-modules-commonjs @testing-library/jest-dom @testing-library/react @testing-library/user-event
      working-directory: ./front
    
    - name: Run Frontend Tests
      id: test
      run: |
        # 테스트 실행 및 결과 저장
        npm run test:ci
        
        # 결과 파일 확인 및 디버깅
        echo "=== Test Results File Contents ==="
        cat test-results.json || echo "test-results.json not found"
        echo "================================="
      working-directory: ./front
      env:
        CI: true
        NODE_ENV: test
      continue-on-error: true

    - name: Add Test Results Comment
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            // 테스트 결과 파일 읽기 및 디버깅
            let testResults;
            try {
              const resultContent = fs.readFileSync('./front/test-results.json', 'utf8');
              console.log('Raw test results:', resultContent);
              testResults = JSON.parse(resultContent);
            } catch (e) {
              console.error('Error reading test results:', e);
              throw new Error(`Failed to read test results: ${e.message}`);
            }
            
            // 커버리지 정보 읽기
            let coverageReport = '';
            try {
              const coverageContent = fs.readFileSync('./front/coverage/lcov-report/index.html', 'utf8');
              const coverageMatch = coverageContent.match(/<div class='fl pad1y space-right2'>(.*?)<\/div>/g);
              if (coverageMatch) {
                coverageReport = coverageMatch
                  .map(match => match.replace(/<[^>]+>/g, '').trim())
                  .join('\n');
              }
            } catch (e) {
              console.error('Error reading coverage:', e);
              coverageReport = '커버리지 정보를 불러올 수 없습니다.';
            }
            
            // 테스트 결과 요약 생성
            const numFailedTests = testResults.numFailedTests || 0;
            const numTotalTests = testResults.numTotalTests || 0;
            const numPassedTests = testResults.numPassedTests || 0;
            
            const testSummary = `**전체 상태:** ${numFailedTests > 0 ? '❌ 일부 테스트 실패' : '✅ 모든 테스트 통과'}
            - 총 테스트 수: ${numTotalTests}
            - 통과: ${numPassedTests}
            - 실패: ${numFailedTests}`;
            
            // 상세 테스트 결과 생성
            let detailedResults = '';
            if (testResults.testResults) {
              detailedResults = testResults.testResults
                .filter(suite => suite && suite.testResults && suite.testResults.length > 0)
                .map(suite => {
                  const fileName = suite.name.split('/').pop().replace('.test.js', '');
                  const tests = suite.testResults.map(test => {
                    const status = test.status === 'passed' ? '✅' : '❌';
                    const failureInfo = test.failureMessages && test.failureMessages.length > 0 
                      ? `\n  \`\`\`\n  ${test.failureMessages.join('\n  ')}\n  \`\`\`` 
                      : '';
                    return `- ${status} ${test.title}${failureInfo}`;
                  }).join('\n');
                  
                  return `#### ${fileName} 컴포넌트 테스트\n${tests}`;
                })
                .join('\n\n');
            }
            
            // 최종 메시지 구성
            const message = `## 테스트 결과 요약
            ${testSummary}
            
            ### 상세 테스트 결과
            ${detailedResults || '상세 테스트 결과가 없습니다.'}
            
            ### Coverage Report 📊
            \`\`\`
            ${coverageReport}
            \`\`\`
            
            🕒 테스트 실행 시간: ${new Date().toLocaleString()}`;
            
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: message
              });
            }
          } catch (error) {
            console.error('Error in test result processing:', error);
            core.setFailed(`Action failed with error: ${error.message}`);
          }