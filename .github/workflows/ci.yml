name: CI Test

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './front/package-lock.json'
    
    - name: Install Dependencies
      run: |
        rm -f package-lock.json
        npm install
        npm install -D jest @babel/preset-env @babel/preset-react babel-jest identity-obj-proxy @babel/plugin-transform-modules-commonjs @testing-library/jest-dom @testing-library/react @testing-library/user-event
      working-directory: ./front
    
    - name: Run Frontend Tests
      id: test
      run: |
        # Jest 직접 실행
        ./node_modules/.bin/jest --json --outputFile=test-results.json --testMatch='**/src/test/**/*.test.js' --coverage --ci || true
        
        # 결과 파일 생성 확인 및 디버깅
        echo "Checking test results file..."
        ls -la test-results.json || echo "test-results.json not found"
        
        # 결과 파일 내용 출력
        if [ -f "test-results.json" ]; then
          echo "Test results content:"
          cat test-results.json
        fi
      working-directory: ./front
      env:
        CI: true
        NODE_ENV: test
      continue-on-error: true

    - name: Add Test Results Comment
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            console.log('Starting test results processing...');
            
            // 테스트 결과 파일 읽기
            const testResultsPath = './front/test-results.json';
            console.log('Reading test results from:', testResultsPath);
            
            let testResults;
            try {
              const resultContent = fs.readFileSync(testResultsPath, 'utf8');
              console.log('Raw test results content:', resultContent);
              testResults = JSON.parse(resultContent);
            } catch (e) {
              console.error('Error reading test results:', e);
              testResults = null;
            }
            
            // 커버리지 결과 읽기
            const coverageSummaryPath = './front/coverage/coverage-summary.json';
            let coverageData;
            try {
              coverageData = JSON.parse(fs.readFileSync(coverageSummaryPath, 'utf8'));
            } catch (e) {
              console.error('Error reading coverage data:', e);
              coverageData = null;
            }
            
            // 테스트 요약 생성
            const testSummary = testResults ? 
              `**전체 상태:** ${testResults.numFailedTests > 0 ? '❌ 일부 테스트 실패' : '✅ 모든 테스트 통과'}
              - 총 테스트 수: ${testResults.numTotalTests}
              - 통과: ${testResults.numPassedTests}
              - 실패: ${testResults.numFailedTests}`
              : '테스트 결과를 불러올 수 없습니다.';
            
            // 상세 테스트 결과 생성
            let detailedResults = '';
            if (testResults && testResults.testResults) {
              console.log('Processing test suites...');
              detailedResults = testResults.testResults
                .filter(suite => suite && suite.testResults)
                .map(suite => {
                  const fileName = suite.name.split('/').pop().replace('.test.js', '');
                  const suiteResults = suite.testResults
                    .map(test => {
                      const status = test.status === 'passed' ? '✅' : '❌';
                      const failures = test.failureMessages && test.failureMessages.length > 0
                        ? `\n  \`\`\`\n  ${test.failureMessages.join('\n  ')}\n  \`\`\``
                        : '';
                      return `- ${status} ${test.title}${failures}`;
                    })
                    .join('\n');
                  
                  return `#### ${fileName}\n${suiteResults}`;
                })
                .join('\n\n');
            }
            
            // 커버리지 정보 생성
            let coverageReport = '';
            if (coverageData) {
              const total = coverageData.total;
              coverageReport = `
              Statement Coverage: ${total.statements.pct}%
              Branch Coverage: ${total.branches.pct}%
              Function Coverage: ${total.functions.pct}%
              Line Coverage: ${total.lines.pct}%
              `;
            } else {
              coverageReport = '커버리지 정보를 불러올 수 없습니다.';
            }
            
            const message = `## 테스트 결과 요약
            ${testSummary}
            
            ### 상세 테스트 결과
            ${detailedResults || '상세 테스트 결과가 없습니다.'}
            
            ### Coverage Report 📊
            \`\`\`
            ${coverageReport}
            \`\`\`
            
            🕒 테스트 실행 시간: ${new Date().toLocaleString()}`;
            
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: message
              });
            }
          } catch (error) {
            console.error('Error in test result processing:', error);
            core.setFailed(`Action failed with error: ${error.message}`);
          }