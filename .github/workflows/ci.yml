name: CI Test

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './front/package-lock.json'
    
    - name: Install Dependencies
      run: |
        rm -f package-lock.json
        npm install
        npm install -D @babel/preset-env @babel/preset-react babel-jest identity-obj-proxy jest @babel/plugin-transform-modules-commonjs @testing-library/jest-dom @testing-library/react @testing-library/user-event
      working-directory: ./front
    
    - name: Run Frontend Tests
      id: test
      run: |
        # 테스트 실행 및 결과 저장
        npm run test:ci -- --json --outputFile=test-results.json || true
        
        if [ -f "test-results.json" ]; then
          echo "TEST_RESULTS<<EOF" >> $GITHUB_ENV
          cat test-results.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # 테스트 실패 여부 확인
          if [ "$(jq '.numFailedTests' test-results.json)" != "0" ]; then
            echo "TEST_FAILED=true" >> $GITHUB_ENV
          else
            echo "TEST_FAILED=false" >> $GITHUB_ENV
          fi
        else
          echo "TEST_FAILED=true" >> $GITHUB_ENV
        fi
        
        # 커버리지 결과 수집
        echo "COVERAGE_REPORT<<EOF" >> $GITHUB_ENV
        npm test -- --coverage --coverageReporters="text-summary" 2>&1 | tail -n 4 >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
      working-directory: ./front
      env:
        CI: true
        NODE_ENV: test
      continue-on-error: true

    - name: Add Test Results Comment
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          try {
            const testResults = JSON.parse(process.env.TEST_RESULTS || '{}');
            const coverageReport = process.env.COVERAGE_REPORT || '';
            
            // 테스트 결과 파싱
            const testResults = testResults.testResults || [];
            const failedTests = testResults.numFailedTests || 0;
            const passedTests = testResults.numPassedTests || 0;
            const totalTests = testResults.numTotalTests || 0;
            
            // 파일별로 테스트 결과 그룹화
            const testsByFile = testResults.reduce((acc, suite) => {
              const fileName = suite.name.split('/').pop().replace('.test.js', '');
              const tests = suite.testResults.map(test => ({
                name: test.title,
                status: test.status === 'passed' ? '✅' : '❌',
                failureMessages: test.status === 'failed' ? test.failureMessages : []
              }));
              acc[fileName] = tests;
              return acc;
            }, {});

            // 파일별 테스트 결과 문자열 생성
            const testStatusSection = Object.entries(testsByFile)
              .map(([fileName, tests]) => `
              #### ${fileName} 컴포넌트 테스트
              ${tests.map(test => `- ${test.name} ${test.status}${
                test.failureMessages.length > 0 
                  ? '\n  ```\n  ' + test.failureMessages.join('\n  ') + '\n  ```'
                  : ''
              }`).join('\n')}
              `).join('\n');

            const message = `## 테스트 결과 요약

            ### Frontend Tests 🌐
            **전체 상태:** ${process.env.TEST_FAILED === 'true' ? '❌ 일부 테스트 실패' : '✅ 모든 테스트 통과'}
            
            **테스트 통계:**
            - 총 테스트 수: ${totalTests}
            - 통과: ${passedTests}
            - 실패: ${failedTests}

            ### 상세 테스트 결과
            ${testStatusSection}

            ### Coverage Report 📊
            \`\`\`
            ${coverageReport}
            \`\`\`

            ---
            🕒 테스트 실행 시간: ${new Date().toLocaleString()}`;

            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: message
              });
            }
          } catch (error) {
            core.setFailed(`Action failed with error: ${error}`);
          }